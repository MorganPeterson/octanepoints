name: Release

on:
  push:
    tags:
      - "v*"     # pushes like v0.1.0 trigger a release

permissions:
  contents: write   # needed to create/upload releases

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      APP_NAME: myapp           # CHANGE: your binary name
      MAIN_PKG: ./cmd/myapp     # CHANGE: your main package
      OS_LIST: "linux windows darwin freebsd openbsd netbsd"
      ARCH_LIST: "amd64 arm64"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"    # or your version

      - name: Tools
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build, package, checksum
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME}"   # e.g. v0.1.0
          mkdir -p dist

          for GOOS in $OS_LIST; do
            for GOARCH in $ARCH_LIST; do
              EXT=""
              PKG="tar -czf"
              OUT="${APP_NAME}_${VERSION}_${GOOS}_${GOARCH}"
              BIN="${APP_NAME}"

              if [ "$GOOS" = "windows" ]; then
                EXT=".exe"
                PKG="zip -j"
              fi

              CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH \
                go build -trimpath -ldflags "-s -w -X main.version=${VERSION}" \
                -o "dist/${BIN}${EXT}" "${MAIN_PKG}"

              pushd dist >/dev/null
              if [ "$GOOS" = "windows" ]; then
                $PKG "${OUT}.zip" "${BIN}${EXT}"
              else
                $PKG "${OUT}.tar.gz" "${BIN}${EXT}"
              fi

              # checksum file alongside each archive
              if [ -f "${OUT}.zip" ]; then
                sha256sum "${OUT}.zip" > "${OUT}.sha256"
              else
                sha256sum "${OUT}.tar.gz" > "${OUT}.sha256"
              fi

              rm -f "${BIN}${EXT}"
              popd >/dev/null
            done
          done

      - name: Create release & upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.sha256
